<?php

namespace bs\IDP\ArchiveBundle\Entity;

use Doctrine\ORM\EntityRepository;
use bs\Core\UsersBundle\SessionMng\bsCoreUserSession;

use Doctrine\ORM\Query;

use \DateTime;

use bs\IDP\ArchiveBundle\ConstantDefinition\IDPConstants;

define ("IN_FILTER_STATUS", serialize ( array(

    // Disponible
    array( // Prestataire, Intermédiarei, Interne
        array( 'DISI' ),
        array( 'DISINT' ),
        array( 'DISP' ),
        ),
	// En Transfert
	array( 	// Prestataire, Intermediaire, Interne
		array( 'DTRI', 'CDTRI' ),
        array( 'DTRINT', 'CDTRINT' ),
        array( 'DTRP', 'GDTRP', 'CDTRP' )
    ),
	// En Consultation
	array(
		array( 'CONI', 'CONRIDISP', 'CONRICONP' ),
        array( 'CONINT', 'CONRINTDISP', 'CONRINTCONP' ),
        array( 'CONP' )
    ),
	// En attente de Retour
	array(
		array( 'CRAI', 'CRTI' ),
        array( 'CRAINT', 'CRTINT' ),
        array( 'CRAP', 'CRTP', 'GRAP', 'CRAPCONRIDISP', 'GRAPCONRIDISP', 'CRTPCONRIDISP', 'CRAPCONRINTDISP', 'GRAPCONRINTDISP', 'CRTPCONRINTDISP',
            'CRAPCONRICONP', 'GRAPCONRICONP', 'CRTPCONRICONP', 'CRAPCONRINTCONP', 'GRAPCONRINTCONP', 'CRTPCONRINTCONP' )
    ),
	// En attente de Sortie
	array(
		array( 'CSAI', 'CSDI', 'ESDI' ),
        array( 'CSAINT', 'CSDINT', 'ESDINT' ),
        array( 'CSAP', 'CSDP', 'ESDP', 'GSAP' )
    ),
	// En attente de Destruction
	array(
		array( 'CDAI', 'CDEI', 'EDEI' ),
        array( 'CDAINT', 'CDEINT', 'EDEINT' ),
        array( 'CDAP', 'CDEP', 'EDEP', 'GDAP' )
    ),
    // En attente de Relocalisation
    array( // Prestataire, Intermédiaire, Interne
        array( 'CRLPDAI', 'CRLPDAINT', 'CRLPDI', 'CRLPDINT', 'CRLPCAI', 'CRLPCAINT', 'CRLPCI', 'CRLPCINT', 'GRLDPAI', 'GRLPDAINT' ),
        array( 'CRLINTDAI', 'CRLINTDAP', 'CRLINTDAINT', 'GRLINTDAP', 'CRLINTDI', 'CRLINTDP', 'CRLINTDINT', 'CRLINTCAI', 'CRLINTCAINT', 'CRLINTCI', 'CRLINTCINT' ),
        array( 'CRLIDAINT', 'CRLICAP', 'CRLICAI', 'GRLIDAP', 'CRLIDINT', 'CRLIDP', 'CRLIDI', 'CRLICAINT', 'CRLICAI', 'CRLICINT', 'CRLICI' )
	),
    // En attente de Consultation
    array(
        array( 'CLAI', 'CPAI', 'CLII', 'CPRI' ),
        array( 'CLAINT', 'CPAINT', 'CLIINT', 'CPRINT' ),
        array( 'CLAP', 'CPAP', 'CLIP', 'CPRP', 'GPAP', 'GLAP' )
    ),
    // DTA
    array( 'DTA' )

)));


/**
 * IDPArchiveRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IDPArchiveRepository extends EntityRepository
{
    const STATUS_AVAILABLE = 0;
    const STATUS_TRANSFER = 1;
    const STATUS_CONSULT = 2;
    const STATUS_RETURN = 3;
    const STATUS_EXIT = 4;
    const STATUS_DELETE = 5;
    const STATUS_RELOC = 6;
    const STATUS_INCONSULT = 7;
    const STATUS_DTA = 8;

    const WHERE_INTERNAL = 0;
    const WHERE_INTERMEDIATE = 1;
    const WHERE_PROVIDER = 2;

    const FILTER_STATUS_AVAILABLE = 1;
    const FILTER_STATUS_TRANSFER = 2;
    const FILTER_STATUS_CONSULT = 4;
    const FILTER_STATUS_RETURN = 8;
    const FILTER_STATUS_EXIT = 16;
    const FILTER_STATUS_DELETE = 32;
    const FILTER_STATUS_RELOC = 64;
    const FILTER_STATUS_INCONSULT = 128;
    const FILTER_STATUS_DTA = 256;

    const FILTER_WHERE_INTERNAL = 1;
    const FILTER_WHERE_INTERMEDIATE = 2;
    const FILTER_WHERE_PROVIDER = 4;

    const FILTER_WITH_DOCUMENT = 1;
    const FILTER_WITH_BOX = 2;
    const FILTER_WITH_CONTAINER = 3;

    public function findAll()
    {
        return $this->findBy(array(), array('ordernumber' => 'ASC'));
    }

	private function getServiceFilter( $services ){
		$strReturn = '';
		if( !$services )
			return $strReturn;

		$strReturn .= ' AND ( ';
		$first = true;
		foreach( $services as $service ){
			if( $first )
				$first = false;
			else
				$strReturn .= ' OR ';
			$id = $service->getService()->getId();
			$strReturn .= " a.service = $id ";
		}
		$strReturn .= ' )';

		return $strReturn;
	}

    //..............................................................................................................
    // Make the query for getArchivesWithStatuses or getNbArchiveWithStatuses
    private function getArchiveWithStatusesQuery( $count, $statuses, $max = null, $ownerId = null, $object = false, $isArchivist = false, $userServices = null ){
        if( !$count )
            $querySelect = 'SELECT a ';
        else
            $querySelect = 'SELECT COUNT(a.id)';

        $querySelect .= ' FROM bsIDPArchiveBundle:IDPArchive a, ';
        $querySelect .= ' bsIDPArchiveBundle:IDPArchivesStatus s ';
        $querySelect .= ' WHERE a.status=s.id AND ( ';
        $bfirst = true;
        foreach( $statuses as $status ){
            if( !$bfirst )
                $querySelect .= ' OR ';
            else
                $bfirst = false;
            $querySelect .= " s.shortname LIKE '$status' ";
        }
        $querySelect .= ') ';
        if( $ownerId )
            $querySelect .= 'AND a.lastactionby = ' . $ownerId;
        else {
            if ($userServices != null) {
                $bfirst = true;
                $querySelect .= ' AND a.service IN ( ';
                foreach ($userServices as $userService) {
                    if (!$bfirst)
                        $querySelect .= ', ';
                    else
                        $bfirst = false;
                    $querySelect .= $userService->getService()->getId();
                }
                $querySelect .= ') ';
            }
        }

        $query = $this->getEntityManager()->createQuery( $querySelect );

        if( $max != null )
            $query = $query->setMaxResults($max);

        if( !$object )
            $query = $query->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);

        return $query;
    }
    //..............................................................................................................
    // Retreive all archives with a list of STATUSES given by shortname
    public function getArchivesWithStatuses( $statuses, $owner, $object = false, $isArchivist = false, $userServices = null ){
        $query = $this->getArchiveWithStatusesQuery( false, $statuses, null, $owner, $object, $isArchivist, $userServices );

        if( !$object )
            $result = $query->getArrayResult();
        else
            $result = $query->getResult();

        return $result;
    }
    //..............................................................................................................
    // Count all archives with a list of STATUSES given by shortname
    public function getNbArchiveWithStatuses( $statuses, $owner, $isArchivist = false, $userServices = null ){
        $query = $this->getArchiveWithStatusesQuery( true, $statuses, null, $owner, false, $isArchivist, $userServices );

        $result = $query->getResult();
        if (count($result) == 0 ) return 0;
        else return $result[0][1];
    }

	public function getLastEnteredArchive( $owner ){
		$querySelect = 'SELECT a';
		$querySelect .= ' FROM bsIDPArchiveBundle:IDPArchive a ';
		$querySelect .= " WHERE a.owner='$owner' ";
		$querySelect .= ' ORDER BY a.createdat DESC ';

		$query = $this->getEntityManager()->createQuery( $querySelect );
		$query = $query->setMaxResults( 1 );

		$result = $query->getResult();
		if( count($result) == 0 ) return null;
		else return $result[0];

	}

	private function makePartialRequestArchivistDatas( $allowedServices, $statusFilter, $uawith, $filterprovider, $special, $fromarchive, $uawhat, $uawhere ){
		$queryStr = ($fromarchive? 'FROM bsIDPArchiveBundle:IDPArchive a':'' );
		$queryStr .= ', bsIDPArchiveBundle:IDPArchivesStatus s ';
		$queryStr .= ' WHERE a.status=s.id ';
		$queryStr .= ' AND ( ';
		$bFirst = true;
		foreach( $statusFilter as $status ){
			if( $bFirst )
				$bFirst = false;
			else
				$queryStr .= ' OR ';
			$queryStr .= " s.shortname LIKE '$status' ";
		}
		if( $allowedServices ){
			$queryStr .= ' ) AND ( a.service IN ( ';
			$bFirst = true;
			foreach( $allowedServices as $service ){
				if( $bFirst )
					$bFirst = false;
				else
					$queryStr .= ' ,';
				$queryStr .=  $service ;
			}
			$queryStr .= ' ) ';
		}
		$queryStr .= ' ) ';
		if( $uawith != null )
			switch( $uawith ){
				case 0: // container
					$queryStr .= " AND a.containernumber<>'' ";
					break;
				case 1: // box
					$queryStr .= " AND a.boxnumber<>'' ";
					break;
				case 2: // file
					$queryStr .= " AND a.documentnumber<>'' ";
					break;
				case 3: // Empty
					$queryStr .= " AND ( ( a.containernumber='' OR a.containernumber IS NULL ) ";
					$queryStr .= " AND ( a.boxnumber='' OR a.boxnumber IS NULL ) ";
					$queryStr .= " AND ( a.documentnumber='' OR a.documentnumber IS NULL ) ) ";
					break;

			}

        if(( $filterprovider != null ) && ( intval($filterprovider) >= 0 )) {
            if( ( $uawhat == IDPConstants::UAWHAT_RELOC && $uawhere == IDPConstants::UAWHERE_CONSULT ) || ( $uawhat == IDPConstants::UAWHAT_RETURN ) )
                $queryStr .= " AND ( a.oldlocalization = " . intval($filterprovider) . " OR a.localization = " . intval($filterprovider) . " )";
            else
                $queryStr .= " AND ( a.localization = " . intval($filterprovider) . ")";
        }

        if( $special )// Text in search box on the table side
        {
            $specialSearch = " AND ( a.name LIKE '%" . $special . "%' OR a.ordernumber LIKE '%". $special .
                "%' OR a.containernumber LIKE '%".$special."%' OR a.boxnumber LIKE '%".$special.
                "%' OR a.documentnumber LIKE '%".$special."%' ) ";
            $queryStr .= $specialSearch;
        }

		return $queryStr;
	}
	public function countArchivistDatas( $allowedServices, $statusFilter, $uawith, $filterprovider, $special, $uawhat, $uawhere ){

		$queryStr = 'SELECT COUNT(a.id) ';
		$queryStr .= $this->makePartialRequestArchivistDatas( $allowedServices, $statusFilter, $uawith, $filterprovider, $special, true, $uawhat, $uawhere );

		$query = $this->getEntityManager()->createQuery( $queryStr );

		return $query->getSingleScalarResult();
	}

	public function loadArchivistDatas( $allowedServices, $statusFilter, $uawith, $filterprovider, $special, $sort, $order, $limit, $offset, $uawhat, $uawhere ){
		$queryStr = 'SELECT a ';
		$queryStr .= $this->makePartialRequestArchivistDatas( $allowedServices, $statusFilter, $uawith, $filterprovider, $special, true, $uawhat, $uawhere );
		if( ($sort != null) && (strlen($sort) > 0) )
		    $queryStr .= " ORDER BY a.$sort $order ";

		$query = $this->getEntityManager()
			->createQuery( $queryStr )
			->setMaxResults( $limit )
			->setFirstResult( $offset )
			->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);

		return $query->getArrayResult();
	}

	public function getArray( $id ){
		$query = $this->getEntityManager()
        	->createQuery("SELECT a FROM bsIDPArchiveBundle:IDPArchive a WHERE a.id = :id")
        	->setParameter('id', $id)
			->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);
		return $query->getArrayResult();
	}

	public function getSearchQuery( $userServices, $service, $legalentity,
		$description1, $description2, $name, $limitnum, $limitalpha, $limitalphanum,
		$limitdate, $ordernumber, $budgetcode,  $documentnature,
		$documenttype, $closureyear, $destructionyear, $documentnumber, $boxnumber,
	    $containernumber, $provider, $filterstatus, $filterwhere, $filterwith, $filterlocalization, $special,
        $unlimited ){

        $filteredStatus = false;
        if( $filterwhere == 0 ) $filterwhere = self::FILTER_WHERE_INTERNAL + self::FILTER_WHERE_INTERMEDIATE + self::FILTER_WHERE_PROVIDER;
        else $filteredStatus = true;

		if( $filterstatus != 0 ) $filteredStatus = true;
        

        $FILTER_STATUS = unserialize (IN_FILTER_STATUS);
        $statusFilter = [];
        if( $filterstatus & self::FILTER_STATUS_DTA ){
            $statusFilter = array_merge($statusFilter, $FILTER_STATUS[self::STATUS_DTA]);
        }
        if( $filterstatus & self::FILTER_STATUS_AVAILABLE ){
            if( $filterwhere & self::FILTER_WHERE_INTERNAL )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_AVAILABLE][self::WHERE_INTERNAL] );
            if( $filterwhere & self::FILTER_WHERE_INTERMEDIATE )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_AVAILABLE][self::WHERE_INTERMEDIATE] );
            if( $filterwhere & self::FILTER_WHERE_PROVIDER )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_AVAILABLE][self::WHERE_PROVIDER] );
        }
        if( $filterstatus & self::FILTER_STATUS_TRANSFER ){
            if( $filterwhere & self::FILTER_WHERE_INTERNAL )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_TRANSFER][self::WHERE_INTERNAL] );
            if( $filterwhere & self::FILTER_WHERE_INTERMEDIATE )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_TRANSFER][self::WHERE_INTERMEDIATE] );
            if( $filterwhere & self::FILTER_WHERE_PROVIDER )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_TRANSFER][self::WHERE_PROVIDER] );
        }
        if( $filterstatus & self::FILTER_STATUS_CONSULT ){
            if( $filterwhere & self::FILTER_WHERE_INTERNAL )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_CONSULT][self::WHERE_INTERNAL] );
            if( $filterwhere & self::FILTER_WHERE_INTERMEDIATE )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_CONSULT][self::WHERE_INTERMEDIATE] );
            if( $filterwhere & self::FILTER_WHERE_PROVIDER )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_CONSULT][self::WHERE_PROVIDER] );
        }
        if( $filterstatus & self::FILTER_STATUS_RETURN ){
            if( $filterwhere & self::FILTER_WHERE_INTERNAL )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_RETURN][self::WHERE_INTERNAL] );
            if( $filterwhere & self::FILTER_WHERE_INTERMEDIATE )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_RETURN][self::WHERE_INTERMEDIATE] );
            if( $filterwhere & self::FILTER_WHERE_PROVIDER )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_RETURN][self::WHERE_PROVIDER] );
        }
        if( $filterstatus & self::FILTER_STATUS_EXIT ){
            if( $filterwhere & self::FILTER_WHERE_INTERNAL )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_EXIT][self::WHERE_INTERNAL] );
            if( $filterwhere & self::FILTER_WHERE_INTERMEDIATE )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_EXIT][self::WHERE_INTERMEDIATE] );
            if( $filterwhere & self::FILTER_WHERE_PROVIDER )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_EXIT][self::WHERE_PROVIDER] );
        }
        if( $filterstatus & self::FILTER_STATUS_DELETE ){
            if( $filterwhere & self::FILTER_WHERE_INTERNAL )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_DELETE][self::WHERE_INTERNAL] );
            if( $filterwhere & self::FILTER_WHERE_INTERMEDIATE )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_DELETE][self::WHERE_INTERMEDIATE] );
            if( $filterwhere & self::FILTER_WHERE_PROVIDER )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_DELETE][self::WHERE_PROVIDER] );
        }
        if( $filterstatus & self::FILTER_STATUS_RELOC ){
            if( $filterwhere & self::FILTER_WHERE_INTERNAL )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_RELOC][self::WHERE_INTERNAL] );
            if( $filterwhere & self::FILTER_WHERE_INTERMEDIATE )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_RELOC][self::WHERE_INTERMEDIATE] );
            if( $filterwhere & self::FILTER_WHERE_PROVIDER )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_RELOC][self::WHERE_PROVIDER] );
        }
        if( $filterstatus & self::FILTER_STATUS_INCONSULT ){
            if( $filterwhere & self::FILTER_WHERE_INTERNAL )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_INCONSULT][self::WHERE_INTERNAL] );
            if( $filterwhere & self::FILTER_WHERE_INTERMEDIATE )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_INCONSULT][self::WHERE_INTERMEDIATE] );
            if( $filterwhere & self::FILTER_WHERE_PROVIDER )
                $statusFilter = array_merge( $statusFilter, $FILTER_STATUS[self::STATUS_INCONSULT][self::WHERE_PROVIDER] );
        }

		$statuses = $this->getEntityManager()
			->getRepository('bsIDPArchiveBundle:IDPArchivesStatus')
			->getAll();
        
		$filterStatusIds = ' (';
        $bFirst = true;
		foreach ($statuses as $status)
			if( in_array( $status['shortname'], $statusFilter ) ) {
                if ($bFirst) $bFirst = false;
                else $filterStatusIds .= ',';

                $filterStatusIds .= $status['id'];
            }
        $filterStatusIds .= ') ';

        $strWith = '';
        if( $filterwith > 0 ){
            $bFirst = true;
            if( $filterwith & self::FILTER_WITH_DOCUMENT ){
                if( $bFirst ) $bFirst = false; else $strWith .= ' AND ';
                $strWith .= ' a.documentnumber IS NOT NULL ';
            }
            if( $filterwith & self::FILTER_WITH_BOX ) {
                if ($bFirst) $bFirst = false; else $strWith .= ' AND ';
                $strWith .= ' a.boxnumber IS NOT NULL ';
            }
            if( $filterwith & self::FILTER_WITH_CONTAINER ) {
                if ($bFirst) $bFirst = false; else $strWith .= ' AND ';
                $strWith .= ' a.containernumber IS NOT NULL ';
            }
        }

        if( $filterlocalization ){
            $strLocalization = '';
            $filterlocalizations = explode( ',', $filterlocalization );
            $bFirst = true;
            foreach ( $filterlocalizations as $localizationId ){
                if( $bFirst ) $bFirst = false; else $strLocalization .= ' OR ';
                $strLocalization .= ' a.localization = '. $localizationId. ' ';
            }
        }

		$queryBase = '';
		// $queryBase .= ' FROM bsIDPArchiveBundle:IDPArchive a ';

        $bFirst = true;
        $queryBase .= ' WHERE ';

		if( $filteredStatus ) {
            if( $bFirst ) $bFirst = false; else $queryBase .= ' AND ';
			$queryBase .= " a.status IN $filterStatusIds ";
		}

		if( $service ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.service = $service ";
        }
		else{
			// List of services allowed for user
            if( $bFirst ) $bFirst = false; else $queryBase .= ' AND ';
			$queryBase .= ' ( ';
			$first = true;
			foreach( $userServices as $userService ){
				if( $first )
					$first = false;
				else
					$queryBase .= ' OR ';
				$queryBase .= ' a.service = '. $userService->getService()->getId();
			}
			$queryBase .= ' ) ';
		}
		if( $legalentity ) {
            if( $bFirst ) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.legalentity = $legalentity ";
        }
		if( $description1 ) {
            if( $bFirst ) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.description1 = $description1 ";
        }
		if( $description2 ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.description2 = $description2 ";
        }
		if( $name ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.name LIKE '%$name%' ";
        }
		if( $limitnum ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " ( a.limitnummin <= $limitnum AND a.limitnummax >= $limitnum ) ";
        }
		if( $limitalpha ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " ( STRCMP( a.limitalphamin, '$limitalpha' ) <= 0 AND STRCMP( a.limitalphamax, '$limitalpha' ) >= 0 ) ";
        }
		if( $limitalphanum ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " ( STRCMP( a.limitalphanummin, '$limitalphanum' ) <= 0 AND STRCMP( a.limitalphanummax, '$limitalphanum' ) >= 0 ) ";
        }
		if( $limitdate ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " ( a.limitdatemin <= STR_TO_DATE( '$limitdate', '%d/%m/%Y' )AND a.limitdatemax >= STR_TO_DATE( '$limitdate', '%d/%m/%Y' ) ) ";
        }
		if( $ordernumber ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.ordernumber LIKE '%$ordernumber%' ";
        }
		if( $budgetcode ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.budgetcode = $budgetcode ";
        }
		if( $documentnature ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.documentnature = $documentnature ";
        }
		if( $documenttype ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.documenttype = $documenttype ";
        }
		if( $closureyear ){
            $closureyearbounds = explode( ",", $closureyear );
			if( count($closureyearbounds) >= 2 ) {
                if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
                $queryBase .= " ( a.closureyear >= $closureyearbounds[0] AND a.closureyear <= $closureyearbounds[1] ) ";
            }
		}
        switch( $unlimited ){
            case 0: // Only unlimited archives wanted
                if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
                $queryBase .= ' ( a.unlimited = 1 ) ';
                break;
            case 1: // Only non unlimited archives wanted
                if( $destructionyear ){
                    $destructionyearbounds = explode( ",", $destructionyear );
                    if( count($destructionyearbounds) >= 2 ) {
                        if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
                        $queryBase .= " ( a.destructionyear >= $destructionyearbounds[0] AND a.destructionyear <= $destructionyearbounds[1] AND ( a.unlimited IS NULL OR a.unlimited = 0 ) ) ";
                    }
                }
                break;
            case 2: // Both limited and unlimited wanted
                if( $destructionyear ){
                    $destructionyearbounds = explode( ",", $destructionyear );
                    if( count($destructionyearbounds) >= 2 ) {
                        if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
                        $queryBase .= " (( a.destructionyear >= $destructionyearbounds[0] AND a.destructionyear <= $destructionyearbounds[1] ".
                            "AND ( a.unlimited IS NULL OR a.unlimited = 0 )) OR ( a.unlimited = 1 ))";
                    }
                }
                break;
        }
		if( $documentnumber ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.documentnumber LIKE '%$documentnumber%' ";
        }
		if( $boxnumber ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.boxnumber LIKE '%$boxnumber%' ";
        }
		if( $containernumber ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.containernumber LIKE '%$containernumber%' ";
        }
		if( $provider ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= " a.provider = $provider ";
        }
        if( $filterwith ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= $strWith;
        }
        if( $filterlocalization ) {
            if ($bFirst) $bFirst = false; else $queryBase .= ' AND ';
            $queryBase .= $strLocalization;
        }

        if( $special )// Text in search box on the table side
        {
            $specialSearch = " AND ( a.name LIKE '%" . $special . "%' OR a.ordernumber LIKE '%". $special .
                "%' OR a.containernumber LIKE '%".$special."%' OR a.boxnumber LIKE '%".$special.
                "%' OR a.documentnumber LIKE '%".$special."%' ) ";
            $queryBase .= $specialSearch;
        }

		return $queryBase ;
	}

    private function getFilterStatus( $uastate, $uawhat, $uawhere, $uahow ){

        $statusFilter = [];
        switch( $uastate ) {
            case 0: // Manage user wants
                switch ($uawhat) {
                    case 0:    // A Transférer
                    case 5:    // A Relocaliser
                        $statusFilter = IDPConstants::$FILTER_STATUS[$uastate][$uawhat][$uawhere];
                        break;
                    case 1: // A Livrer
                        $statusFilter = IDPConstants::$FILTER_STATUS[$uastate][$uawhat][$uahow];
                        break;
                    default:
                        $statusFilter = IDPConstants::$FILTER_STATUS[$uastate][$uawhat];
                }
                break;
            case 1: // Manage provider
                if( $uawhat != IDPConstants::UAWHAT_RELOC )
                    $statusFilter = IDPConstants::$FILTER_STATUS[$uastate][$uawhat];
                else
                    $statusFilter = IDPConstants::$FILTER_STATUS[$uastate][$uawhat][$uawhere];
                break;
            case 2: // Validate user wants
                switch ($uawhat) {
                    case 0:    // A Transférer
                    case 5: // A Relocaliser
                        $statusFilter = IDPConstants::$FILTER_STATUS[$uastate][$uawhat][$uawhere];
                        break;
                    case 1: // A Livrer
                        $statusFilter = IDPConstants::$FILTER_STATUS[$uastate][$uawhat][$uahow];
                        break;
                    default:
                        $statusFilter = IDPConstants::$FILTER_STATUS[$uastate][$uawhat];
                }
                break;
        }
        return $statusFilter;
    }

    public function getPrintArchives( $userServices, $listArchiveId, $search, $dtaServices, $fctCall, $logger = null ){

	    $inIdList = '';
	    if( $listArchiveId != null ){
	        foreach( $listArchiveId as $aid )
	            $inIdList .= (strlen($inIdList)>0?',':' a.id IN (') . $aid;
	        $inIdList .= ') ';
        } else {
	        switch( $fctCall ) {
                case 1: // Transfer
                    $servicesAllowed = '';
                    foreach ($userServices as $userService)
                        $servicesAllowed .= (strlen($servicesAllowed) > 0 ? ',' : ' IN (') . $userService->getService()->getId();
                    $servicesAllowed .= ')';

                    $queryBase = " JOIN a.status s WHERE s.shortname = 'DTA' ";
                    $queryBase .= " AND a.service " . $servicesAllowed;
                    $special = array_key_exists('special', $search ) ? $search['special']: null;
                    if( $special )// Text in search box on the table side
                    {
                        $specialSearch = " AND ( a.name LIKE '%" . $special . "%' OR a.ordernumber LIKE '%". $special .
                            "%' OR a.containernumber LIKE '%".$special."%' OR a.boxnumber LIKE '%".$special.
                            "%' OR a.documentnumber LIKE '%".$special."%' ) ";
                        $queryBase .= $specialSearch;
                    }
                    break;
                case 2: // Return, Delete, Exit, Reloc, deliver
                    $queryBase = $this->getSearchQuery($userServices,
                        array_key_exists('service', $search) ? $search['service'] : null,
                        array_key_exists('legalentity', $search) ? $search['legalentity'] : null,
                        array_key_exists('description1', $search) ? $search['description1'] : null,
                        array_key_exists('description2', $search) ? $search['description2'] : null,
                        array_key_exists('name', $search) ? $search['name'] : null,
                        array_key_exists('limitnum', $search) ? $search['limitnum'] : null,
                        array_key_exists('limitalpha', $search) ? $search['limitalpha'] : null,
                        array_key_exists('limitalphanum', $search) ? $search['limitalphanum'] : null,
                        array_key_exists('limitdate', $search) ? $search['limitdate'] : null,
                        array_key_exists('ordernumber', $search) ? $search['ordernumber'] : null,
                        array_key_exists('budgetcode', $search) ? $search['budgetcode'] : null,
                        array_key_exists('documentnature', $search) ? $search['documentnature'] : null,
                        array_key_exists('documenttype', $search) ? $search['documenttype'] : null,
                        array_key_exists('closureyear', $search) ? $search['closureyear'] : null,
                        array_key_exists('destructionyear', $search) ? $search['destructionyear'] : null,
                        array_key_exists('documentnumber', $search) ? $search['documentnumber'] : null,
                        array_key_exists('boxnumber', $search) ? $search['boxnumber'] : null,
                        array_key_exists('containernumber', $search) ? $search['containernumber'] : null,
                        array_key_exists('provider', $search) ? $search['provider'] : null,
                        array_key_exists('filterstatus', $search) ? $search['filterstatus'] : null,
                        array_key_exists('filterwhere', $search) ? $search['filterwhere'] : null,
                        array_key_exists('filterwith', $search) ? $search['filterwith'] : null,
                        array_key_exists('filterlocalization', $search) ? $search['filterlocalization'] : null,
                        array_key_exists('special', $search ) ? $search['special']: null,
                        array_key_exists('unlimited',$search ) ? $search['unlimited']:2
                    );
                break;
                case 3: // Manage user, manage provider, close user
                    $xpwhat = (array_key_exists('xpwhat', $search )?$search['xpwhat']:null);
                    $xpwith = (array_key_exists('xpwith', $search)?$search['xpwith']:null);
                    $xpstate = (array_key_exists('xpstate', $search)?$search['xpstate']:null);
                    $xpwhere = (array_key_exists('xpwhere', $search)?$search['xpwhere']:null);
                    $xphow = (array_key_exists('xphow', $search)?$search['xphow']:null);
                    $filterprovider = (array_key_exists('filterprovider', $search)?$search['filterprovider']:null);
                    $special = array_key_exists('special', $search ) ? $search['special']: null;

                    if( $xpwhat != 0 ) $xpwith = null;

                    // Allowed viewed services, based on user profile
                    $allowedServices = [];
                    foreach( $userServices as $userService )
                        array_push( $allowedServices, $userService->getService()->getId() );

                    // Status to search in, based on screen parameters
                    $statusFilter = $this->getFilterStatus( $xpstate, $xpwhat, $xpwhere, $xphow );

                    // Ask database for archives
                    $queryBase = $this->makePartialRequestArchivistDatas( $allowedServices, $statusFilter, $xpwith, $filterprovider, $special, false, $xpwhat, $xpwhere );

                    break;
            }
        }

        $queryString = 'SELECT a FROM bsIDPArchiveBundle:IDPArchive a ';
        if( $listArchiveId != null )
            $queryString .= ' WHERE '. $inIdList;
        else
            $queryString .= $queryBase;

        $query = $this->getEntityManager()
            ->createQuery( $queryString )
            ->setHint( Query::HINT_INCLUDE_META_COLUMNS, true );

        return $query->getArrayResult();
    }

	// Construct query for export purpose
	public function getExportQuery( $userServices, $fct, $search, $what, $where, $how, $with, $state, $filter_provider ){

		// Export all
		if( $fct == 0 ){
			$querySelect = "SELECT a FROM bsIDPArchiveBundle:IDPArchive a";
			$query = $this->getEntityManager()
				->createQuery( $querySelect )
				->setHint( Query::HINT_INCLUDE_META_COLUMNS, true );
			return $query;
		}


        switch( $fct ) {
            case 1: // Export asked from Transfer(1) screen
                $query = $this->getArchiveWithStatusesQuery(false, ['DTA'], null, null, false, null, $userServices);
                break;

            case 2:
            case 3:
            case 4:
            case 5: // Export asked from Consult(2), Return(3), Exit(4) or Delete(5) screen
            case 28: // Unlimited

                //getSearchQuery(
                //$bsUserSession->getUserServices(), $service, $legalentity, $description1, $description2, $name, $limitnum, $limitalpha, $limitalphanum,
                //$limitdate, $ordernumber, $budgetcode,  $documentnature, $documenttype, $closureyear, $destructionyear, $documentnumber, $boxnumber,
                //$containernumber, $provider, $filterstatus, $filterwhere, $filterwith, $filterlocalization, $special
                $queryBase = $this->getSearchQuery($userServices,

                    array_key_exists('service', $search) ? $search['service'] : null,
                    array_key_exists('legalentity', $search) ? $search['legalentity'] : null,
                    array_key_exists('description1', $search) ? $search['description1'] : null,
                    array_key_exists('description2', $search) ? $search['description2'] : null,
                    array_key_exists('name', $search) ? $search['name'] : null,
                    array_key_exists('limitnum', $search) ? $search['limitnum'] : null,
                    array_key_exists('limitalpha', $search) ? $search['limitalpha'] : null,
                    array_key_exists('limitalphanum', $search) ? $search['limitalphanum'] : null,
                    array_key_exists('limitdate', $search) ? $search['limitdate'] : null,
                    array_key_exists('ordernumber', $search) ? $search['ordernumber'] : null,
                    array_key_exists('budgetcode', $search) ? $search['budgetcode'] : null,
                    array_key_exists('documentnature', $search) ? $search['documentnature'] : null,
                    array_key_exists('documenttype', $search) ? $search['documenttype'] : null,
                    array_key_exists('closureyear', $search) ? $search['closureyear'] : null,
                    array_key_exists('destructionyear', $search) ? $search['destructionyear'] : null,
                    array_key_exists('documentnumber', $search) ? $search['documentnumber'] : null,
                    array_key_exists('boxnumber', $search) ? $search['boxnumber'] : null,
                    array_key_exists('containernumber', $search) ? $search['containernumber'] : null,
                    array_key_exists('provider', $search) ? $search['provider'] : null,
                    array_key_exists('filterstatus', $search) ? $search['filterstatus'] : null,
                    array_key_exists('filterwhere', $search) ? $search['filterwhere'] : null,
                    array_key_exists('filterwith', $search) ? $search['filterwith'] : null,
                    array_key_exists('filterlocalization', $search) ? $search['filterlocalization'] : null,
                    array_key_exists('special', $search) ? $search['special'] : null,
                    array_key_exists( 'unlimited', $search ) ? $search['unlimited']:2
                );

                $querySelect = 'SELECT a FROM bsIDPArchiveBundle:IDPArchive a ' . $queryBase;

                $query = $this->getEntityManager()
                    ->createQuery($querySelect)
                    ->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);
                break;

            case 6: // Manage, Validate & Close

                $xpwhat = $what;
                $xpwith = $with;
                $xpstate = $state;
                $xpwhere = $where;
                $xphow = $how;
                $filterprovider = $filter_provider;
                $special = array_key_exists('special', $search) ? $search['special'] : null;

                if ($xpwhat != 0) $xpwith = null;

                // Allowed viewed services, based on user profile
                $allowedServices = [];
                foreach ($userServices as $userService)
                    array_push($allowedServices, $userService->getService()->getId());

                // Status to search in, based on screen parameters
                $statusFilter = $this->getFilterStatus($xpstate, $xpwhat, $xpwhere, $xphow);

                // Ask database for archives
                $queryBase = $this->makePartialRequestArchivistDatas($allowedServices, $statusFilter, $xpwith, $filterprovider, $special, false, $xpwhat, $xpwhere );

                $querySelect = 'SELECT a FROM bsIDPArchiveBundle:IDPArchive a ';
                $querySelect .= $queryBase;

                $query = $this->getEntityManager()
                    ->createQuery($querySelect)
                    ->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);

                break;

            default: // Export All

                $query = $this->getEntityManager()
                    ->createQuery('SELECT a FROM bsIDPArchiveBundle:IDPArchive a')
                    ->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);
                break;
        }

		return $query;
	}

	public function findOneWithConstraint( $name, $service, $legalentity, $budgetcode, $activity, $documenttype, $description1, $description2, $provider ){
		$queryStr = 'SELECT a ';
		$queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a ';
		$queryStr .= ' WHERE a.service = ' . $service->getId();
		$queryStr .= ' AND a.legalentity = ' . $legalentity->getId();
		if( $budgetcode != null )
			$queryStr .= ' AND a.budgetcode = ' . $budgetcode->getId();
		if( $activity != null )
			$queryStr .= ' AND a.documentnature = ' . $activity->getId();
		if( $documenttype != null )
			$queryStr .= ' AND a.documenttype = ' . $documenttype->getId();
		if( $description1 != null )
			$queryStr .= ' AND a.description1 = ' . $description1->getId();
		if( $description2 != null )
			$queryStr .= ' AND a.description2 = ' . $description2->getId();
		if( $provider != null )
			$queryStr .= ' AND a.provider = ' . $provider->getId();

		$query = $this->getEntityManager()
			->createQuery( $queryStr )
			->setMaxResults( 1 )
			->setHint( Query::HINT_INCLUDE_META_COLUMNS, true );

		return $query->getResult();

	}

	// Remove all archive from import with import_id
	public function removeAllWithImportId( $importID ){
	    $queryStr = 'DELETE ';
	    $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a ';
	    $queryStr .= ' WHERE a.import_id = '.$importID;

	    $query = $this->getEntityManager()
            ->createQuery( $queryStr );

	    return $query->getResult();
    }

    public function validateAllWithImportId( $importID ){
	    $queryStr = 'UPDATE bsIDPArchiveBundle:IDPArchive a ';
	    $queryStr .= ' SET a.import_id = null ';
	    $queryStr .= ' WHERE a.import_id = ' .$importID;

	    $query = $this->getEntityManager()
            ->createQuery( $queryStr );

	    return $query->getResult();
    }

    public function getAllInListForConnectorProvider( $ids ){

        // Create IN array
        $strInArray = '(';
        $bFirst = true;
        foreach ( $ids as $id ){
            $strInArray .= ($bFirst?'':',') . $id;
            $bFirst = false;
        }
        $strInArray .= ')';
        $queryStr = 'SELECT a.id, p.id AS puid, p.longname, s.id AS suid, a.containernumber, a.boxnumber, a.documentnumber, a.name, a.precisionwho, a.containerasked, a.boxasked, a.serviceentrydate, a.saveserviceentrydate ';
        $queryStr .= ' , (CASE WHEN a.containernumber IS NULL THEN 1 ELSE 0 END) AS HIDDEN ord1 '; // To have null after values
        $queryStr .= ' , (CASE WHEN a.boxnumber IS NULL THEN 1 ELSE 0 END) AS HIDDEN ord2 ';
        $queryStr .= ' , (CASE WHEN a.documentnumber IS NULL THEN 1 ELSE 0 END) AS HIDDEN ord3 ';
        $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ' JOIN a.provider p ';
        $queryStr .= ' JOIN a.service s';
        $queryStr .= ' WHERE a.id IN ' . $strInArray;
        $queryStr .= ' ORDER BY p.longname ASC, ord1 ASC, a.containernumber ASC, ord2 ASC, a.boxnumber ASC, ord3 ASC, a.documentnumber ASC, suid, a.containerasked ASC, a.boxasked ASC ';

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }

    public function countUasWhereSameContainer( $container, $service, $entrydate, $saveentrydate = false, $statuses = null, $lock = false ){
        $queryStr = 'SELECT COUNT(a.id) ';
        $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ' , bsIDPBackofficeBundle:IDPServices s ';
        $queryStr .= ' , bsIDPArchiveBundle:IDPArchivesStatus st ';
        $queryStr .= " WHERE a.service = s.id ";
        $queryStr .= " AND a.status = st.id ";
        $queryStr .= " AND st.id > 1 "; // #B313: NAV status must be excluded

        $queryStr .= " AND a.containernumber = '". $container . "'";
        if( $lock )
            $queryStr .= " AND a.containerasked > 0 ";      // E#140
        $queryStr .= " AND s.id = $service";

        if( $entrydate )
            $queryStr .= " AND a.serviceentrydate = ".$entrydate;
        else {
            $queryStr .= " AND a.serviceentrydate IS NULL";
            $queryStr .= " AND a.saveserviceentrydate IS ".($saveentrydate?"NOT":"")." NULL";
        }

        if( $statuses != null ) {                                   // E#140
            $bFirst = true;
            $queryStr .= ' AND st.shortname IN ( ';
            foreach ( $statuses as $status ) {
                if ($bFirst) $bFirst = false; else $queryStr .= ',';
                $queryStr .= "'" . $status . "'";
            }
            $queryStr .= ')';
        }

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getSingleScalarResult();
    }
    public function countUasWhereSameBox( $box, $container, $service, $entrydate, $saveentrydate = false, $statuses = null, $lock = false ){
        $queryStr = 'SELECT COUNT(a.id) ';
        $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ' , bsIDPBackofficeBundle:IDPServices s';
        $queryStr .= ' , bsIDPArchiveBundle:IDPArchivesStatus st ';
        $queryStr .= " WHERE a.service = s.id ";
        $queryStr .= " AND a.status = st.id ";
        $queryStr .= " AND st.id > 1 "; // #B313: NAV status must be excluded

        $queryStr .= " AND a.boxnumber = '". $box . "'";
        $queryStr .= " AND a.containernumber ".($container?"= '".$container."'":' IS NULL ');
        if( $lock )                                         // E#140
            $queryStr .= " AND a.boxasked > 0 ";
        $queryStr .= " AND s.id = $service";

        if( $entrydate )
            $queryStr .= " AND a.serviceentrydate = ".$entrydate;
        else {
            $queryStr .= " AND a.serviceentrydate IS NULL";
            $queryStr .= " AND a.saveserviceentrydate IS ".($saveentrydate?"NOT":"")." NULL";
        }

        if( $statuses != null ) {                                      // E#140
            $bFirst = true;
            $queryStr .= ' AND st.shortname  IN (';
            foreach ( $statuses as $status ) {
                if( $bFirst ) $bFirst = false; else $queryStr .= ',';
                $queryStr .= "'" . $status . "'";
            }
            $queryStr .= ')';
        }

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getSingleScalarResult();
    }

    public function getAllOptimizedConnectorProvider( $provider_id, $containerlist, $boxlist, $idlist ){
        // Create INs arrays
        $strContainerArray = null;
        $strBoxArray = null;
        $strIdArray = null;
        if( sizeof( $containerlist ) > 0 ) {
            $strContainerArray = '';
            $bFirst = true;
            foreach ($containerlist as $container) {
                $strContainerArray .= ($bFirst ? '' : 'OR') . " ( a.containernumber LIKE '" . $container[0] . "' AND t.id = ". $container[1] ." ) ";
                $bFirst = false;
            }
        }
        if( sizeof( $boxlist ) > 0 ) {
            $strBoxArray = '';
            $bFirst = true;
            foreach( $boxlist as $box ){
                $strBoxArray .= ($bFirst?'':'OR') . " ( a.boxnumber LIKE '" . $box[0] . "' AND a.containernumber IS NULL AND t.id = ". $box[1] . ") ";      // box don't have container
                $bFirst = false;
            }
        }
        if( sizeof( $idlist ) > 0 ){
            $strIdArray = '(';
            $bFirst = true;
            foreach( $idlist as $id ){
                $strIdArray .= ($bFirst?'':',') . $id;
                $bFirst = false;
            }
            $strIdArray .= ')';
        }

        $queryStr = 'SELECT a.id AS id, t.id AS suid, p.longname AS provider, a.containernumber AS containernumber, a.boxnumber AS boxnumber,';
        $queryStr .= ' a.documentnumber AS documentnumber, a.name AS name, s.longname AS status, s.shortname AS statuscaps, a.containerasked, a.boxasked ';
        $queryStr .= ' , (CASE WHEN a.containernumber IS NULL THEN 1 ELSE 0 END) AS HIDDEN ord1 ';
        $queryStr .= ' , (CASE WHEN a.boxnumber IS NULL THEN 1 ELSE 0 END) AS HIDDEN ord2 ';
        $queryStr .= ' , (CASE WHEN a.documentnumber IS NULL THEN 1 ELSE 0 END) AS HIDDEN ord3 ';
        $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ' INNER JOIN bsIDPBackofficeBundle:IDPProviders p WITH a.provider = p.id ';
        $queryStr .= ' INNER JOIN bsIDPArchiveBundle:IDPArchivesStatus s WITH a.status = s.id ';
        $queryStr .= ' INNER JOIN bsIDPBackofficeBundle:IDPServices t WITH a.service = t.id ';
        $queryStr .= ' WHERE ( p.id = '.$provider_id.' ) AND ( ';
        $bFirst = true;
        if( $strContainerArray ) {
            $queryStr .= $strContainerArray;
            $bFirst = false;
        }
        if( $strBoxArray ){
            $queryStr .= ($bFirst?'':' OR ') . $strBoxArray;
            $bFirst = false;
        }
        if( $idlist ){
            $queryStr .= ($bFirst?'':' OR ') . ' a.id IN ' . $strIdArray;
            $bFirst = false;
        }
        $queryStr .= ' ) ';
        $queryStr .= ' AND s.id > 1 '; // #B313: NAV status must be excluded
        $queryStr .= ' ORDER BY ';
        $queryStr .= ' suid ASC, ';
        $queryStr .= ' ord1 ASC, a.containernumber ASC, ';
        $queryStr .= ' ord2 ASC, a.boxnumber ASC, ';
        $queryStr .= ' ord3 ASC, a.documentnumber ASC, ';
        $queryStr .= ' a.containerasked ASC, a.boxasked ASC ';

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();

    }

    public function blockAllArchiveInList( $idlist, $block ){
        // Prepare In Array
        $strIdArray = '(';
        $bFirst = true;
        foreach( $idlist as $id ){
            $strIdArray .= ($bFirst?'':',') . $id;
            $bFirst = false;
        }
        $strIdArray .= ')';

        $now = new DateTime();
        $nowts = $now->getTimestamp();

        $queryStr = 'UPDATE bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ' SET a.locked = ' . ($block?'1':'null');
        $queryStr .= ' , a.lockbegintime = '. ($block?$nowts:'null');
        $queryStr .= ' WHERE a.id IN ' .$strIdArray;

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }

    public function getAllInListForArchivistVerification( $ids ){

        // Create IN array
        $strInArray = '(';
        $bFirst = true;
        foreach ( $ids as $id ){
            $strInArray .= ($bFirst?'':',') . $id;
            $bFirst = false;
        }
        $strInArray .= ')';
        $queryStr = 'SELECT a.id, a.containernumber, a.boxnumber, a.documentnumber, serv.id as service, a.serviceentrydate, s.shortname as status, a.containerasked, a.boxasked, a.saveserviceentrydate ';
        $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a, bsIDPArchiveBundle:IDPArchivesStatus s, bsIDPBackofficeBundle:IDPServices serv ';
        $queryStr .= ' WHERE a.status = s.id ';
        $queryStr .= ' AND a.service = serv.id ';
        $queryStr .= ' AND a.id IN ' . $strInArray;
        $queryStr .= ' AND s.id > 1';               // #B313: NAV status must be excluded

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }

    // if container != null => retreive container otherwise retreive box
    public function getUasWhereSameContainerOrBox( $container, $box, $service, $date, $listStatus ){

        $queryStr = 'SELECT a.id, a.containernumber, a.boxnumber, a.documentnumber, a.containerasked, a.boxasked ';
        $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a, bsIDPArchiveBundle:IDPArchivesStatus st ';
        if( $container != null )
            $queryStr .= " WHERE a.containernumber LIKE '". $container ."'";
        else
            $queryStr .= " WHERE a.boxnumber LIKE '". $box ."' AND a.containernumber IS NULL ";
        $queryStr .= ' AND a.service = '.$service;
        $queryStr .= ' AND a.status = st.id ';
        if( $date != null ) $queryStr .= ' AND a.serviceentrydate = '.$date; else $queryStr .= ' AND a.serviceentrydate IS NULL';
        if( $listStatus != null ){
            $bFirst = true;
            $queryStr .= ' AND st.shortname IN ( ';
            foreach( $listStatus as $status ){
                if( $bFirst ) $bFirst = false; else $queryStr .= ',';
                $queryStr .= "'".$status."'";
            }
            $queryStr .= ')';
        }
        $queryStr .= ' AND st.id > 1';               // #B313: NAV status must be excluded
        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }

    public function getAllArchivesContainerServiceDate( $container, $service, $date, $locked = null ){

        $queryStr = 'SELECT a.id, a.containernumber, a.boxnumber, a.documentnumber ';
        $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a, bsIDPArchiveBundle:IDPArchivesStatus st ';
        $queryStr .= " WHERE a.containernumber LIKE '". $container ."' AND a.service = ".$service;
        $queryStr .= ' AND a.status = st.id AND st.id > 1 ';                        // #B313: NAV status must be excluded
        if( $date != null ) $queryStr .= " AND a.serviceentrydate = ".$date;
        if( $locked != null ) $queryStr .= " AND a.containerasked > 0 ";

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }
    public function getAllArchivesBoxServiceDate( $box, $service, $date, $locked = null ){

        $queryStr = 'SELECT a.id, a.containernumber, a.boxnumber, a.documentnumber ';
        $queryStr .= ' FROM bsIDPArchiveBundle:IDPArchive a, bsIDPArchiveBundle:IDPArchivesStatus st ';
        $queryStr .= " WHERE a.boxnumber LIKE '". $box ."' AND a.service = ".$service;
        $queryStr .= " AND a.containernumber IS NULL ";                                 // Searching for Box !
        $queryStr .= ' AND a.status = st.id AND st.id > 1 ';                        // #B313: NAV status must be excluded
        if( $date != null ) $queryStr .= " AND a.serviceentrydate = ".$date;
        if( $locked != null ) $queryStr .= " AND a.boxasked > 0 ";

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }

    //E#140
    public function setListOfContainerAsked( $listContainerIDs, $lock, $locktime = 1 ){
	    if( empty( $listContainerIDs ) )
	        return null;

	    $strInArray = '(';
	    $bFirst = true;
	    foreach( $listContainerIDs as $id ){
	        $strInArray .= ($bFirst?'':',') . $id;
	        $bFirst = false;
        }
        $strInArray .= ')';

	    $queryStr = 'UPDATE bsIDPArchiveBundle:IDPArchive a ';
	    $queryStr .= ' SET a.containerasked = '. ($lock?$locktime:'0');
	    $queryStr .= ' WHERE a.id IN '. $strInArray;

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }
    public function manageListOfContainerAsked( $listContainerIDs, $increase, $value ){
        if( empty( $listContainerIDs ) )
            return null;

        $strInArray = '(';
        $bFirst = true;
        foreach( $listContainerIDs as $id ){
            $strInArray .= ($bFirst?'':',') . $id;
            $bFirst = false;
        }
        $strInArray .= ')';

        $queryStr = 'UPDATE bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ' SET a.containerasked = a.containerasked '. ($increase?'+ ':'- ') . $value;
        $queryStr .= ' WHERE a.id IN '. $strInArray;

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }
    public function setListOfBoxAsked( $listBoxIDs, $lock, $locktime = 1 ){
        if( empty( $listBoxIDs ) )
            return null;

        $strInArray = '(';
        $bFirst = true;
        foreach( $listBoxIDs as $id ){
            $strInArray .= ($bFirst?'':',') . $id;
            $bFirst = false;
        }
        $strInArray .= ')';

        $queryStr = 'UPDATE bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ' SET a.boxasked = '. ($lock?$locktime:'0');
        $queryStr .= ' WHERE a.id IN '. $strInArray;

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }
    public function manageListOfBoxAsked( $listBoxIDs, $increase, $value ){
        if( empty( $listBoxIDs ) )
            return null;

        $strInArray = '(';
        $bFirst = true;
        foreach( $listBoxIDs as $id ){
            $strInArray .= ($bFirst?'':',') . $id;
            $bFirst = false;
        }
        $strInArray .= ')';

        $queryStr = 'UPDATE bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ' SET a.boxasked = a.boxasked '. ($increase?'+ ':'- ') . $value;
        $queryStr .= ' WHERE a.id IN '. $strInArray;

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }
    public function getOnlyIfProviderAction( $ids ){
        if( empty( $ids ) )
            return null;

        $strIDInArray = '(';
        $bFirst = true;
        foreach( $ids as $id ){
            $strIDInArray .= ($bFirst?'':',') . $id;
            $bFirst = false;
        }
        $strIDInArray .= ')';

        $allowedStatuses = [ 'CLAP', 'CPAP', 'GLAP', 'GPAP', 'CLIP', 'CPRP', 'CRAP', 'GRAP', 'CRTP',
            'CRLPDAI', 'CRLPDAINT', 'GRLPDAI', 'GRLPDAINT', 'CRLPDI', 'CRLPDINT',
            'CRAPCONRIDISP', 'GRAPCONRIDISP', 'CRTPCONRIDISP', 'CRAPCONRINTDISP', 'GRAPCONRINTDISP', 'CRTPCONRINTDISP'];
        $strStatusInArray = '(';
        $bFirst = true;
        foreach ( $allowedStatuses as $status ){
            $strStatusInArray .= ($bFirst?'':' OR ') . " s.shortname LIKE '$status'";
            $bFirst = false;
        }
        $strStatusInArray .= ')';

        $queryStr = 'SELECT DISTINCT a.id ';
        $queryStr .=' FROM bsIDPArchiveBundle:IDPArchive a ';
        $queryStr .= ', bsIDPArchiveBundle:IDPArchivesStatus s ';
        $queryStr .= ' WHERE a.id IN '. $strIDInArray;
        $queryStr .= ' AND '.$strStatusInArray;

        $query = $this->getEntityManager()
            ->createQuery( $queryStr );

        return $query->getResult();
    }

    public function getNextID(){
        $queryStr = 'SELECT ua.id FROM bsIDPArchiveBundle:IDPArchive ua ORDER BY ua.id DESC';

        $query = $this->getEntityManager()->createQuery( $queryStr )->setMaxResults(1);
        $result = $query->getResult();

        if($result)
            return intval($result[0]) + 1;
        else
            return 1;
    }

}





