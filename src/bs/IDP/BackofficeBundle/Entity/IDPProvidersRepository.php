<?php

namespace bs\IDP\BackofficeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * IDPProvidersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IDPProvidersRepository extends EntityRepository
{
    public function findAll()
    {
        return $this->findBy(array(), array('longname' => 'ASC'));
    }

	public function getAll( )
	{
		$querySelect = "SELECT p FROM bsIDPBackofficeBundle:IDPProviders p";
		$query = $this->getEntityManager()->createQuery($querySelect)
            ->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);
		return $query->getArrayResult();
	}

    public function getAllIndexedOnID( ){
        $result = [];
        $providers = $this->getAll();
        if( !$providers ) return null;

        foreach( $providers as $provider ){
            $result[$provider['id']] = $provider;
        }
        return $result;
    }

    public function countProviders( $search ){

		$queryStr = 'SELECT COUNT(p.id) ';
		$queryStr .= ' FROM bsIDPBackofficeBundle:IDPProviders p ';
        if( $search )
            $queryStr .= " WHERE p.longname LIKE '%$search%' ";

		$query = $this->getEntityManager()->createQuery( $queryStr );

		return $query->getSingleScalarResult();
	}

	public function loadProvidersDatas( $search, $sort, $order, $limit, $offset ){
		$queryStr = 'SELECT p ';
		$queryStr .= ' FROM bsIDPBackofficeBundle:IDPProviders p ';
        if( $search )
            $queryStr .= " WHERE p.longname LIKE '%$search%' ";
		$queryStr .= " ORDER BY p.$sort $order ";

		$query = $this->getEntityManager()
			->createQuery( $queryStr )
			->setMaxResults( $limit )
			->setFirstResult( $offset )
			->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);

		return $query->getResult();
	}

	public function findOneWithConstraint( $longname, $service_id ){

        $query = $this->createQueryBuilder( 'p' )
            ->select( 'p' )
            ->leftJoin( 'p.services', 's' )
            ->addSelect( 's' )
            ->where( 'p.longname = :longname' )
            ->andWhere( 's.id = :sid' )
            ->setParameter( 'longname', $longname )
            ->setParameter( 'sid', $service_id );

        return $query->getQuery()->getResult();
	}

    public function findPrevNext( $providerId, $sortASC ){
        $em = $this->getEntityManager();

        // On récupère le nom de l'élément courant
        $query = $em->createQuery( "SELECT t.longname FROM bsIDPBackofficeBundle:IDPProviders t WHERE t.id = :currentid" )
            ->setParameter( 'currentid', $providerId );
        $currentNameRsp = $query->getResult();
        if( !$currentNameRsp ) return null;
        $currentName = $currentNameRsp[0]['longname'];

        // Get next when ordered ASC
        $query = $em->createQuery( "SELECT MIN(t.longname) as longname FROM bsIDPBackofficeBundle:IDPProviders t WHERE t.longname > :currentname ORDER by t.longname" )
            ->setParameter( 'currentname' , $currentName )
            ->setMaxResults( 1 );
        $nextEntryRsp = $query->getResult();
        if( !$nextEntryRsp ) $nextEntryName = null;
        else $nextEntryName = $nextEntryRsp[0]['longname'];

        $query = $em->createQuery( "SELECT t.id FROM bsIDPBackofficeBundle:IDPProviders t WHERE t.longname = :nextname" )
            ->setParameter( 'nextname' , $nextEntryName );
        $nextEntryRsp = $query->getResult();
        if( !$nextEntryRsp ) $nextEntryId = null;
        else $nextEntryId = $nextEntryRsp[0]['id'];

        // Get previous when ordered ASC
        $query = $em->createQuery( "SELECT MAX(t.longname) as longname FROM bsIDPBackofficeBundle:IDPProviders t WHERE t.longname < :currentname ORDER by t.longname" )
            ->setParameter( 'currentname' , $currentName )
            ->setMaxResults( 1 );
        $previousEntryRsp = $query->getResult();
        if( !$previousEntryRsp ) $previousEntryName = null;
        else $previousEntryName = $previousEntryRsp[0]['longname'];

        $query = $em->createQuery( "SELECT t.id FROM bsIDPBackofficeBundle:IDPProviders t WHERE t.longname = :previousname" )
            ->setParameter( 'previousname' , $previousEntryName );
        $previousEntryRsp = $query->getResult();
        if( !$previousEntryRsp ) $previousEntryId = null;
        else $previousEntryId = $previousEntryRsp[0]['id'];

        if( $sortASC == 1 )
            return [
                'previous' => [ 'id' => ($previousEntryId===null)?null:$previousEntryId, 'longname'=> ($previousEntryName===null)?null:$previousEntryName ],
                'current' => ['id' => $providerId, 'longname' => $currentName ],
                'next' => [ 'id' => ($nextEntryId===null)?null:$nextEntryId, 'longname'=> ($nextEntryName===null)?null:$nextEntryName ]
            ];
        else // Order seems to be DESC, so invert
            return [
                'previous' => [ 'id' => ($nextEntryId===null)?null:$nextEntryId, 'longname'=> ($nextEntryName===null)?null:$nextEntryName ],
                'current' => ['id' => $providerId, 'longname' => $currentName ],
                'next' => [ 'id' => ($previousEntryId===null)?null:$previousEntryId, 'longname'=> ($previousEntryName===null)?null:$previousEntryName ]
            ];

    }
}
