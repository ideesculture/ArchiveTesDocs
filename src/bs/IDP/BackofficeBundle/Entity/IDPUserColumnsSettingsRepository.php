<?php

namespace bs\IDP\BackofficeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * IDPUserColumnsSettingsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IDPUserColumnsSettingsRepository extends EntityRepository
{
    public function getAll( )
    {
        $querySelect = "SELECT u FROM bsIDPBackofficeBundle:IDPUserColumnsSettings u";
        $query = $this->getEntityManager()->createQuery($querySelect);
        return $query->getArrayResult();
    }

    public function getAllIndexedOnID( ){
        $result = [];
        $IDPUserColumnsSettings = $this->getAll();
        if( !$IDPUserColumnsSettings ) return null;

        foreach( $IDPUserColumnsSettings as $IDPUserColumnSettings ){
            $result[$IDPUserColumnSettings['id']] = $IDPUserColumnSettings;
        }
        return $result;
    }

    public function getAllForThisPageIndexedOnColumnID( $page_id ){
        $result = [];
        $queryStr = "SELECT u FROM bsIDPBackofficeBundle:IDPUserColumnsSettings u WHERE u.user_page_settings=$page_id";
        $query = $this->getEntityManager()->createQuery($queryStr)
            ->setHint( Query::HINT_INCLUDE_META_COLUMNS, true);
        $IDPUserColumnsSettings = $query->getResult();

        foreach( $IDPUserColumnsSettings as $IDPUserColumnSettings ){
            $index = $IDPUserColumnSettings->getColumn()->getId();
            $result[$index] = $IDPUserColumnSettings;
        }
        return $result;
    }

    public function countIDPUserColumnsSettings( ){

        $queryStr = 'SELECT COUNT(u.id) ';
        $queryStr .= ' FROM bsIDPBackofficeBundle:IDPUserColumnsSettings u ';

        $query = $this->getEntityManager()->createQuery( $queryStr );

        return $query->getSingleScalarResult();
    }

    public function getAllForThisPage( $page_id ){
        $queryStr = "SELECT u FROM bsIDPBackofficeBundle:IDPUserColumnsSettings u WHERE u.user_page_settings=$page_id ORDER BY u.column_order";
        $query = $this->getEntityManager()->createQuery($queryStr)
            ->setHint( Query::HINT_INCLUDE_META_COLUMNS, true);
        return $query->getArrayResult();
    }

    public function resetAllSortedColumn( $page_id ){
        $queryStr = "UPDATE bsIDPBackofficeBundle:IDPUserColumnsSettings u SET u.sorted = false WHERE u.user_page_settings = $page_id ";

        $query = $this->getEntityManager( )->createQuery( $queryStr );

        return $query->getResult();
    }

}
