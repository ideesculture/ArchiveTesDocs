<?php

namespace bs\Core\UsersBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

use bs\Core\UsersBundle\Entity\bsUsers;

/**
 * bsUsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class bsUsersRepository extends EntityRepository
{
	public function verifyUser( $login, $password ){
		if( $login == null || $password == null )
			return false;
		if( !is_string($login) || !is_string($password) )
			return false;

		$parameters = array(
		    'login' => $login,
		    'password' => md5($password)
		);

		$querySelect = 'SELECT u ';
		$querySelect .= ' FROM bsCoreUsersBundle:bsUsers u ';
		$querySelect .= " WHERE u.login=:login ";
		$querySelect .= " AND u.password=:password ";

		$query = $this->getEntityManager()->createQuery( $querySelect )->setParameters($parameters);

		$user = $query->getResult();

		if( !$user )
			return false;

		return $user[0];
	}

    public function countUsers( $search ){

        $queryStr = 'SELECT COUNT(b.id) ';
        $queryStr .= ' FROM bsCoreUsersBundle:bsUsers b ';
        if( $search )
            $queryStr .= " WHERE b.lastname LIKE '%$search%' ";

        $query = $this->getEntityManager()->createQuery( $queryStr );

        return $query->getSingleScalarResult();
    }

    public function loadUsers( $search, $sort, $order, $limit, $offset ){
        $queryStr = 'SELECT b ';
        $queryStr .= ' FROM bsCoreUsersBundle:bsUsers b ';
        if( $search )
            $queryStr .= " WHERE b.lastname LIKE '%$search%' ";
        $queryStr .= " ORDER BY b.$sort $order ";

        $query = $this->getEntityManager()
            ->createQuery( $queryStr )
            ->setMaxResults( $limit )
            ->setFirstResult( $offset )
            ->setHint(Query::HINT_INCLUDE_META_COLUMNS, true);

        return $query->getResult();
    }

    public function findByRole( \bs\Core\UsersBundle\Entity\bsRoles $role ){
        $query = $this->createQueryBuilder( 'u' )
            ->select( 'u' )
            ->leftJoin( 'u.roles', 'r' )
            ->addSelect( 'r' );
        $query = $query->add( 'where', $query->expr()->in( 'r', ':r' ))
            ->setParameter( 'r', $role )
            ->getQuery();

        return $query->getResult();
    }

    // Return all users where role is under certain Scale
    public function findByRoleLimit( $roleLimitValue ){
	    $query = $this->createQueryBuilder( 'u' )
            ->select( 'u' )
            ->leftJoin( 'u.roles', 'r' )
            ->addSelect( 'r' )
            ->where( 'r.scale <= :roleLimitValue' )
            ->setParameter( 'roleLimitValue', $roleLimitValue );

	    return $query->getQuery()->getResult();
    }

}
